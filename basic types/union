write  typescript to add two values 
mathoperaation.ts

function add(firstnumber:any,secondnumber:any){
  if (typeof(firstnumber)==='number'&& typeof(secondnumber)==='number')
  {
    return a+b;
  }
  else if( (typeof(firstnumber)==='string'&& typeof(secondnumber)==='string'))
  {
    return firstnumber.concat(secondnumber);
  }
  else{
        throw new Error("Operation not supported");

  }
}

console.log(add(8,9));
console.log(add('apple ',"is a fruit"));

output
[LOG]: 17 
[LOG]: "appleis a fruit" 

console.log(add(true,false))--not allowed
____________________________________________________________________________________________________________________________________________________________________
A union type describes a value that can be one of several types, not just two. For example number | string | boolean is the type of a value that can be a number, a string, or a boolean.
mathoperaation1.ts


function add(firstnumber:number|string,secondnumber:number|string){
  if (typeof(firstnumber)==='number'&& typeof(secondnumber)==='number')
  {
    return a+b
  }
  else if( (typeof(firstnumber)==='string'&& typeof(secondnumber)==='string'))
  {
    return firstnumber.concat(secondnumber)
  }
  else{
        throw new Error("Operation not supported");

  }
}

console.log(add(8,9))
console.log(add('apple ',"is a fruit"))

output
[LOG]: 17 
[LOG]: "appleis a fruit" 

console.log(add(true,false))--not allowed
