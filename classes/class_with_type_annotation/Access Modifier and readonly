

ACCESS MODIFIERS

TypeScript provides three access modifiers to class properties and methods: private, protected, and public.
The private modifier allows access within the same class.
The protected modifier allows access within the same class and subclasses.
The public modifier allows access from any location.

example1.ts

class Person {
    constructor(protected ssn: string, private firstName: string, private lastName: string) {
        this.ssn = ssn;
        this.firstName = firstName;
        this.lastName = lastName;
    }

    getFullName(): string {
        return `${this.firstName} ${this.lastName}`;
    }
}

READ_ONLY

readonly.ts

class Person {
    readonly birthDate: Date;

    constructor(birthDate: Date) {
        this.birthDate = birthDate;
    }
}

let person = new Person(new Date(1990, 12, 25));
person.birthDate = new Date(1991, 12, 25); // Compile error

output
Property 'birthDate' has no initializer and is not definitely assigned in the constructor.
Cannot assign to 'birthDate' because it is a read-only property.


 example 2
readonly_example2.ts

class Person
{
        readonly birthDate=1998:12:11;
        construtor(birthDate:Date)
        {
                this.birthDate=birthDate
        }
}
// let person = new Person();

 let person = new Person(new Date(1990, 12, 25));
// person.birthDate = new Date(1991, 12, 25); // Compile error
console.log(person)

output

[LOG]: Person: {
  "birthDate": 1998
} 

example 3
readonly_example3.ts

const numbers: readonly number[] = [1, 2, 3];

// This will result in a compilation error
// numbers[0] = 4;

// This is allowed
// numbers.push(4); // Error - Property 'push' does not exist on type 'readonly number[]'.


note
Use the readonly access modifier to mark a class property as immutable.
A readonly property must be initialized as a part of the declaration or in the constructor of the same class.

