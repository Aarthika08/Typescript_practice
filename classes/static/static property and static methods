math_operation.ts

class mathopt
{
    //static property
    static pi=3.14;

    //static method
    static add(x:number,y:number):number{
        return x+y;
    }
    //static method
    static multiply(x:number,y:number):number{
        return x*y;
    }
}

// Accessing static property
console.log('Value of PI:', mathopt.pi);

// Calling static methods
const sumResult = mathopt.add(5, 3);
console.log('Sum:', sumResult);

const productResult = mathopt.multiply(4, 6);
console.log('Product:', productResult);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Employee_head_count.ts

class Employee {
    static headcount: number = 0;

    constructor(
        private firstName: string,
        private lastName: string,
        private jobTitle: string) {
        Employee.headcount++;
    }
}let employee1 = new Employee('John', 'Doe', 'Front-end Developer');
let employee2 = new Employee('Jane', 'Doe', 'Back-end Developer');

console.log(Employee.headcount); // 2

explanation

The Employee class has a static property headcount initialized to 0. This property is declared as static, which means it is associated with the class itself, not with instances of the class.
The class has a constructor that takes three parameters (firstName, lastName, and jobTitle). In the constructor, headcount is incremented each time a new instance of Employee is created.
Two instances of the Employee class (john and jane) are created with specific values for the firstName, lastName, and jobTitle properties.
Each time an instance is created, the constructor increments the headcount static property.
The console.log statement prints the current value of the static property headcount.
In this case, it outputs 2 because two instances of the Employee class (john and jane) have been created.
So, the static property headcount keeps track of the total number of instances created from the Employee class. It's a common pattern to use static properties for such purposes,
where you want to maintain shared information across all instances of a class.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
STATIC METHOD
Employee_head_count1.ts


class Employee {
    private static headcount: number = 0;

    constructor(
        private firstName: string,
        private lastName: string,
        private jobTitle: string) {

        Employee.headcount++;
    }

    public static getHeadcount() {
        return Employee.headcount;//2
    }
}

let employee1 = new Employee('John', 'Doe', 'Front-end Developer');
let employee2 = new Employee('Jane', 'Doe', 'Back-end Developer');


