example1:
function add(firstnumber: number, secondnumber: number): number;
function add(firstnumber: string, secondnumber: string): string;
function add(firstnumber: any, secondnumber: any): any {
   return firstnumber + secondnumber;
}
 
example 2

Function overloading with optional parameters
When you overload a function, the number of required parameters must be the same. If an overload has more parameters than the other, you have to make the additional parameters optional. For example:

function sum(firstnumber: number, secondnumber: number): number;
function sum(firstnumber: number, secondnumber: number, thirdnumber: number): number;
function sum(firstnumber: number, secondnumber: number, thirdnumber?: number): number {
    if (thirdnumber) return firstnumber + secondnumber + thirdnumber;
    return firstnumber + secondnumber ;
}
Code language: TypeScript (typescript)
The sum() function accepts either two or three numbers. The third parameter is optional. If you donâ€™t make it optional, you will get an error.

example 3:

class counter{
    private current:number=0;
     count():number;
     count(target:number):number[];
     count(target?:number):number|number[]{
        if(target){ 
let values=[];
        for(let start=this.current;start<=target;start++)
        {
values.push(start);
        }
        this.current = target;
        return values;
        }
                return ++this.current;

     }

}

let cou=new counter();
console.log(cou.count()); // return a number
console.log(cou.count(20)); // return an array

output

[LOG]: 1 
[LOG]: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
