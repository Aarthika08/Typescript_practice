function getFullName(person: {
    firstName: string;
    lastName: string;
}): string {
    return `${person.firstName} ${person.lastName}`;
}

const individual = {
    firstName: 'John',
    lastName: 'Doe'
};

console.log(getFullName(individual));


output

[LOG]: "JohnDoe" 
__________________________________________________________________________________________________________________________________________________________________________________________
example 2
//interface 
interface Person {
    firstName: string;
    lastName: string;
}

// Using function
function getFullName(person: Person): string {
    return `${person.firstName}${person.lastName}`;
}

const individual: Person = {
    firstName: 'John',
    lastName: 'Doe'
};
console.log(getFullName(individual));

// Assigning to variable using interface
const y: string = `${individual.firstName}${individual.lastName}`;
console.log(y);

output
[LOG]: "JohnDoe" 
[LOG]: "JohnDoe" 

__________________________________________________________________________________________________________________________________________________________________________________________

example 3

interface Person {
    firstName: string;
    lastName: string;
    middleName: string;
    age: number;
}

function getFullName(person: Person): string {
    return `${person.firstName}${person.lastName}`;
}

const individual = {
    firstName: 'John',
    lastName: 'Doe'
};
console.log(getFullName(individual));

// Assigning to variable using interface
const y: string = `${individual.firstName}${individual.lastName}`;
console.log(y);

const jane = {
    firstName: 'Jane',
    lastName: 'Doe',
    middleName: 'K.',
    age: 22,
};

console.log(getFullName(jane));

const fullName: string = getFullName(jane);
console.log(fullName);


____________________________________________________________________________________________________________________________________________________________________________
example

interface Person {
    firstName: string;
    lastName: string;
    middleName: string;
    age: number;
}

function getFullName(person: Person): string {
    return `${person.firstName}${person.lastName}`;
}

const individual: Person = {
    firstName: 'John',
    lastName: 'Doe'
};
console.log(getFullName(individual));

// Assigning to variable using interface
const y: string = `${individual.firstName}${individual.lastName}`;
console.log(y);

const jane: Person = {
    firstName: 'Jane',
    lastName: 'Doe',
    middleName: 'K.',
    age: 22,
};

console.log(getFullName(jane));

const fullName: string = getFullName(jane);
console.log(fullName);

output

[LOG]: "JohnDoe" 
[LOG]: "JohnDoe" 
[LOG]: "JaneDoe" 
[LOG]: "JaneDoe" 
__________________________________________________________________________________________________________________________________________________________________________________________
OPTIONAL PROPERTY

example 4
interface Person {
    firstName: string;
    lastName: string;
    middleName?: string;
    age: number;
}

function getFullName(person: Person): string {
    if (person.middleName) {
        return `${person.firstName} ${person.middleName} ${person.lastName}`;
    } else {
        return `${person.firstName} ${person.lastName}`;
    }
}

const individual: Person = {
    firstName: 'John',
    lastName: 'Doe',
    middleName: 'K',
    age: 25,
};
console.log(getFullName(individual));

// Assigning to variable using interface
const y: string = `${individual.firstName}${individual.lastName}`;
console.log(y);


output

[LOG]: "John k Doe" 
[LOG]: "JohnDoe" 
__________________________________________________________________________________________________________________________________________________________________________________________
READ ONLY PROPERTY

example 5

interface Person {
    readonly ssn: string;
    firstName: string;
    lastName: string;
}

const individual: Person = {
    ssn: '171-28-0926',
    firstName: 'John',
    lastName: 'Doe'
};

// This line will result in a TypeScript error since 'ssn' is readonly
// individual.ssn = '171-28-0000';


OUTPUT
Errors in code
Cannot assign to 'ssn' because it is a read-only property.

__________________________________________________________________________________________________________________________________________________________________________________________
FUNCTION TYPES

example 6
interface Person {
    (ssn: string, firstName: string): string;
}

const person: Person = function (ssn: string, firstName: string): string {
    return firstName ? ssn.toUpperCase() : ssn.toLowerCase();
};

console.log(person('hi', 'sample'));

const personLowerCase: Person = function (ssn: string): string {
    return ssn.toLowerCase();
};

console.log(personLowerCase('hi', 'sample'));

output
[LOG]: "hi" 
__________________________________________________________________________________________________________________________________________________________________________________________
CLASS TYPE

EXAMPLE 8

interface Json {
    toJson(): string;
}

class Person implements Json {
    constructor(private firstName: string) {}

    toJson(): string {
        return JSON.stringify(this);
    }
}

const individual = new Person('John');
console.log(individual.toJson());


output
[LOG]: "{"fn":"John"}" 






